mtime = 1599148009
[[pkgs]]
type = "github"
distrib = "e-exception-manager"
package = "E_Exception_Manager-1.0.14"
ext = "tar.gz"
sha256 = "a58c38b40b3ec7365670d19aa17a2bb26c0ba10e4f3129048612459fcdf4d49c"
url = "https://api.github.com/repos/jmt1/trial_pywharf2/releases/assets/24828346"

[pkgs.meta]
name = "E-Exception-Manager"
version = "1.0.14"
filetype = "sdist"
pyversion = ""
metadata_version = "2.1"
summary = "Exception Manager allows you to handle exceptions and print them to a file using a decorator."
home_page = "https://github.com/embention/sw-Python_libs"
author = "Embention"
author_email = "javier.martinez@embention.com"
maintainer = ""
maintainer_email = ""
license = "Proprietary"
description = "# &#128165;  &#128165; Exception Manager  &#128165;  &#128165;\n\n## What it is?\n\nException Manager allows you to handle any exception and print the information about it (Exception Type, Exception Message, Exception Traceback...) to a file using a decorator before the method.\n\n## Usage\n\nException Manager prints the exception information to a file.\nThe path of that file can be default or custom. For example:\n\n ```python\nExceptionManager()\n```\n\nIn main.py file the default path will be \"main\" + \"_error.txt\" == **main_error.txt**\n\nOr user can define a `custom_path`:\n\n```python\nExceptionManager(custom_path)\n```\n\n#### Exception Manager can be used in two different ways:\n\n 1. Calling the decorator function with a default return value (@return_on_failure(value)).\n\n ```python\n    @return_on_failure([])\n    def function_name():\n        # function_body (without try/except)\n        test_list = ['A', 'B', 'C']\n        return test_list\n```\nIn this case, if exception occurs in the function_body, the returned value is `[]`. Try/except is not necessary in this example.\n\n 2. Calling `ExceptionManager(path).add_exception(error)` function from try/except in the code.\n\n ```python\n    def function_name():\n        # function_body (with try/except)\n        b = 0\n        try:\n            a = 1\n            if b > 3:\n                a = b\n        except Exception as error:\n            ExceptionManager().add_exception(error)\n        return a\n```"
keywords = ""
platform = "UNKNOWN"
classifiers = "Programming Language :: Python :: 3"
download_url = ""
comment = ""
md5_digest = "c943d3deb39a00ba73168b8311c27204"
sha256_digest = "a58c38b40b3ec7365670d19aa17a2bb26c0ba10e4f3129048612459fcdf4d49c"
blake2_256_digest = "04bcdf05ecae51f164823d7c82ee56e846098369c3af4467185f39ec185cf768"
requires_python = ">=3.7"
description_content_type = "text/markdown"
":action" = "file_upload"
protocol_version = "1"
distrib = "e-exception-manager"
sha256 = "a58c38b40b3ec7365670d19aa17a2bb26c0ba10e4f3129048612459fcdf4d49c"
[[pkgs]]
type = "github"
distrib = "e-exception-manager"
package = "E_Exception_Manager-1.0.14-py3-none-any"
ext = "whl"
sha256 = "10d7d472646b1fe9478393293606b27c20f5eca5dcc1c2b4b083f4ea9c2060e9"
url = "https://api.github.com/repos/jmt1/trial_pywharf2/releases/assets/24828341"

[pkgs.meta]
name = "E-Exception-Manager"
version = "1.0.14"
filetype = "bdist_wheel"
pyversion = "py3"
metadata_version = "2.1"
summary = "Exception Manager allows you to handle exceptions and print them to a file using a decorator."
home_page = "https://github.com/embention/sw-Python_libs"
author = "Embention"
author_email = "javier.martinez@embention.com"
maintainer = ""
maintainer_email = ""
license = "Proprietary"
description = "# &#128165;  &#128165; Exception Manager  &#128165;  &#128165;\n\n## What it is?\n\nException Manager allows you to handle any exception and print the information about it (Exception Type, Exception Message, Exception Traceback...) to a file using a decorator before the method.\n\n## Usage\n\nException Manager prints the exception information to a file.\nThe path of that file can be default or custom. For example:\n\n ```python\nExceptionManager()\n```\n\nIn main.py file the default path will be \"main\" + \"_error.txt\" == **main_error.txt**\n\nOr user can define a `custom_path`:\n\n```python\nExceptionManager(custom_path)\n```\n\n#### Exception Manager can be used in two different ways:\n\n 1. Calling the decorator function with a default return value (@return_on_failure(value)).\n\n ```python\n    @return_on_failure([])\n    def function_name():\n        # function_body (without try/except)\n        test_list = ['A', 'B', 'C']\n        return test_list\n```\nIn this case, if exception occurs in the function_body, the returned value is `[]`. Try/except is not necessary in this example.\n\n 2. Calling `ExceptionManager(path).add_exception(error)` function from try/except in the code.\n\n ```python\n    def function_name():\n        # function_body (with try/except)\n        b = 0\n        try:\n            a = 1\n            if b > 3:\n                a = b\n        except Exception as error:\n            ExceptionManager().add_exception(error)\n        return a\n```\n\n\n"
keywords = ""
platform = "UNKNOWN"
classifiers = "Programming Language :: Python :: 3"
download_url = ""
comment = ""
md5_digest = "574c0d15d7f2503da5e6b36a65c1eddb"
sha256_digest = "10d7d472646b1fe9478393293606b27c20f5eca5dcc1c2b4b083f4ea9c2060e9"
blake2_256_digest = "7a5c91be678541a60bf851953c7c66ba407179b42e72bc1fb1760f1c7509ab9d"
requires_python = ">=3.7"
description_content_type = "text/markdown"
":action" = "file_upload"
protocol_version = "1"
distrib = "e-exception-manager"
sha256 = "10d7d472646b1fe9478393293606b27c20f5eca5dcc1c2b4b083f4ea9c2060e9"
